---

# == Notes ==

# - GitLab automatically passes artifacts from previous stages by default
# - Set required secret variables at: https://gitlab.data.bas.ac.uk/uk-pdc/metadata-infrastructure/metadata-library/settings/ci_cd

# = Secret variables
# - Variables are grouped by section in KEY: "value" format (e.g. FOO: "bar")
#   Sensitive values are represented by "[Sensitive]"
#
# - AWS IAM id/secret keys for 'bas-gitlab-ci-bas-metadata-generator' user
# > AWS_ACCESS_KEY_ID: "[Sensitive]"
# > AWS_SECRET_ACCESS_KEY: "[Sensitive]"
#
# - PyPi (production) - create tokens at https://pypi.org/manage/account/
# > PYPI_TOKEN (protected): "[Sensitive]"
#
# - GitLab - create token as the 'bot_magic_ci' user
# > GITLAB_ACCESS_TOKEN: "[Sensitive]"

# == Global settings ==

stages:
  - 🧪 test
  - 📋 lint
  - 🏗 build
  - 🚚 publish

variables:
  APP_NAME: bas-metadata-library
  S3_SCHEMA_BUCKET_STAGE: metadata-standards-testing.data.bas.ac.uk
  S3_SCHEMA_BUCKET_PROD: metadata-standards.data.bas.ac.uk

image:
  name: docker-registry.data.bas.ac.uk/uk-pdc/metadata-infrastructure/metadata-library:latest
  entrypoint: [""]

default:
  before_script:
    - "ln -s /.venv .venv"
    - "poetry install --no-interaction --no-ansi"

# == Jobs ==

test:
  stage: 🧪 test
  needs: []
  variables:
    FLASK_ENV: testing
  script:
    - "poetry run pytest -o junit_family=xunit2 --junitxml=test-results.xml --random-order --cov=bas_metadata_library --cov-fail-under=100"
    - "poetry run coverage html"
  coverage: '/Total coverage: \d+\.\d+/'
  artifacts:
    reports:
      junit: test-results.xml
    paths:
      - htmlcov
    expire_in: 1 month

lint:
  stage: 📋 lint
  needs: []
  script:
    - "poetry check"
    - "poetry run flake8 src/"
    - "poetry export --without-hashes -f requirements.txt | poetry run safety check --full-report --stdin"
    - "for file in $(find ./src/bas_metadata_library/schemas/src -name '*.json'); do echo ${file}; poetry run python -m json.tool < ${file} 1>/dev/null || exit 1; done"

build:
  stage: 🏗 build
  needs: []
  script:
    - "poetry version 0.0.0"
    - "poetry build"
  artifacts:
    paths:
      - dist
    expire_in: 1 week
  except:
    - tags

publish:
  stage: 🚚 publish
  needs:
    - test
    - lint
  before_script:
    - "ln -s /.venv .venv"
    - "poetry install --no-interaction --no-ansi"
    - "poetry config pypi-token.pypi $PYPI_TOKEN --local"
  script:
    - "poetry publish --build --no-interaction"
  artifacts:
    paths:
      - dist
    expire_in: 1 month
  only:
    - tags
  environment:
    name: production
    url: https://pypi.org/project/bas-metadata-library/

publish-schemas-stage:
  stage: 🚚 publish
  needs: []
  image:
    name: governmentpaas/awscli:latest
    entrypoint: [""]
  before_script: []
  script:
    - "aws s3 cp src/bas_metadata_library/schemas/dist/iso_19115_1_v2.json s3://$S3_SCHEMA_BUCKET_STAGE/bas-metadata-generator-configuration-schemas/v2/iso-19115-1-v2.json"
    - "aws s3 cp src/bas_metadata_library/schemas/dist/iso_19115_2_v2.json s3://$S3_SCHEMA_BUCKET_STAGE/bas-metadata-generator-configuration-schemas/v2/iso-19115-2-v2.json"
    - "aws s3 cp src/bas_metadata_library/schemas/dist/iec_pas_61174_0_v1.json s3://$S3_SCHEMA_BUCKET_STAGE/bas-metadata-generator-configuration-schemas/v2/iec_pas_61174_0_v1.json"
  only:
    - master

publish-schemas-prod:
  stage: 🚚 publish
  needs: []
  image:
    name: governmentpaas/awscli:latest
    entrypoint: [""]
  before_script: []
  script:
    - "aws s3 cp src/bas_metadata_library/schemas/dist/iso_19115_1_v2.json s3://$S3_SCHEMA_BUCKET_PROD/bas-metadata-generator-configuration-schemas/v2/iso-19115-1-v2.json"
    - "aws s3 cp src/bas_metadata_library/schemas/dist/iso_19115_2_v2.json s3://$S3_SCHEMA_BUCKET_PROD/bas-metadata-generator-configuration-schemas/v2/iso-19115-2-v2.json"
    - "aws s3 cp src/bas_metadata_library/schemas/dist/iec_pas_61174_0_v1.json s3://$S3_SCHEMA_BUCKET_STAGE/bas-metadata-generator-configuration-schemas/v2/iec_pas_61174_0_v1.json"
  only:
    - tags
