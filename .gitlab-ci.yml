---

# == Notes ==

# - GitLab automatically passes artifacts from previous stages by default
# - Set required secret variables at: https://gitlab.data.bas.ac.uk/uk-pdc/metadata-infrastructure/metadata-generator/settings/ci_cd

# = Secret variables
# - Variables are grouped by section in KEY: "value" format (e.g. FOO: "bar")
#   Sensitive values are represented by "[Sensitive]"
#
# - AWS IAM id/secret keys for 'bas-gitlab-ci-bas-metadata-generator' user
# > AWS_ACCESS_KEY_ID: "[Sensetive]"
# > AWS_SECRET_ACCESS_KEY: "[Sensetive]"
#
# - PyPi (production) - create tokens at https://pypi.org/manage/account/
# > PYPI_TOKEN (protected): "[Sensitive]"
#
# - PyPi (staging) - create tokens at https://test.pypi.org/manage/account/
# > PYPI_TEST_TOKEN (protected): "[Sensitive]"
#
# - GitLab - create token as the 'bot_magic_ci' user
# > GITLAB_ACCESS_TOKEN: "[Sensitive]"

# == Global settings ==

stages:
  - 🧪 test
  - 🏗 build
  - 🚚 publish
  - 🚀 release

variables:
  APP_NAME: bas-metadata-library
  S3_SCHEMA_BUCKET_STAGE: metadata-standards-testing.data.bas.ac.uk
  S3_SCHEMA_BUCKET_PROD: metadata-standards.data.bas.ac.uk

image:
  name: docker-registry.data.bas.ac.uk/uk-pdc/metadata-infrastructure/metadata-generator:latest
  entrypoint: [""]

# == Jobs ==

test-app:
  stage: 🧪 test
  variables:
    FLASK_ENV: testing
    FLASK_APP: ./manage.py
  script:
    - "flask test --test-runner junit"
  artifacts:
    paths:
    reports:
      junit: test-results.xml

pep8-app:
  stage: 🧪 test
  script:
    - "flake8 . --ignore=E501"

bandit-app:
  stage: 🧪 test
  script:
    - "bandit -r ."

build-dev:
  stage: 🏗 build
  script:
    - 'poetry build'
  artifacts:
    name: "$CI_BUILD_TOKEN-build"
    paths:
      - dist
    expire_in: 1 week
  except:
    - master
    - tags

build-schemas:
  stage: 🏗 build
  variables:
      FLASK_APP: ./manage.py
  script:
    - "flask output-config-schemas"
  artifacts:
    name: "$CI_BUILD_TOKEN-schemas"
    paths:
      - build/config-schemas
    expire_in: 1 month
  only:
    - master
    - tags

publish-app-stage:
  stage: 🚚 publish
  before_script:
    - "poetry config pypi-token.pypi-testing $PYPI_TEST_TOKEN --local"
    - "python support/python-packaging/parse_version.py $(git describe --tags) --pyproject"
  script:
    - "poetry publish --build --repository pypi-testing --no-interaction"
  artifacts:
    name: "$CI_BUILD_TOKEN-build"
    paths:
      - dist
    expire_in: 1 month
  only:
    - master
  environment:
    name: staging
    url: https://test.pypi.org/project/bas-metadata-library/

publish-app-prod:
  stage: 🚚 publish
  before_script:
    - "poetry config pypi-token.pypi $PYPI_TOKEN --local"
    - "python support/python-packaging/parse_version.py $(git describe --tags) --pyproject"
  script:
    - "poetry publish --build --repository pypi --no-interaction"
  artifacts:
    name: "$CI_BUILD_TOKEN-build"
    paths:
      - dist
    expire_in: 1 month
  only:
    - tags
  environment:
    name: production
    url: https://pypi.org/project/bas-metadata-library/

publish-schemas-stage:
  stage: 🚚 publish
  image:
    name: governmentpaas/awscli:latest
    entrypoint: [""]
  script:
    - "aws s3 sync --delete build/config-schemas s3://$S3_SCHEMA_BUCKET_STAGE/bas-metadata-generator-configuration-schemas/"
  only:
    - master

publish-schemas-prod:
  stage: 🚚 publish
  image:
    name: governmentpaas/awscli:latest
    entrypoint: [""]
  script:
    - "aws s3 sync --delete build/config-schemas s3://$S3_SCHEMA_BUCKET_PROD/bas-metadata-generator-configuration-schemas/"
  only:
    - tags

gitlab-prod:
  stage: 🚀 release
  image:
    name: byrnedo/alpine-curl:0.1.8
    entrypoint: [""]
  script:
    - curl --request POST
      --header 'Content-Type:application/json'
      --header "PRIVATE-TOKEN:$GITLAB_ACCESS_TOKEN"
      --data '{"name":"'$CI_COMMIT_TAG'","tag_name":"'$CI_COMMIT_TAG'","description":"...","milestones":["'$CI_COMMIT_TAG'"]}'
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases"
    - curl --request POST
      --header "PRIVATE-TOKEN:$GITLAB_ACCESS_TOKEN"
      --data name="PyPi package"
      --data url="https://pypi.org/project/$APP_NAME/${CI_COMMIT_TAG:1}"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links"
  only:
    - tags
